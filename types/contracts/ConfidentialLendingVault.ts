/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConfidentialLendingVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETH_PRICE_USDC"
      | "FIXED_INTEREST_RATE"
      | "INITIAL_RATE"
      | "RATE_PRECISION"
      | "USDC_DECIMALS"
      | "asset"
      | "currentRate"
      | "emergencyPause"
      | "emergencyResume"
      | "getCurrentInterestRate"
      | "getETHPrice"
      | "getEncryptedShares"
      | "getEncryptedTotalAssets"
      | "getEncryptedTotalShares"
      | "getUtilizationRate"
      | "lastUpdateTime"
      | "onConfidentialTransferReceived"
      | "owner"
      | "renounceOwnership"
      | "supply"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfidentialSupply"
      | "ConfidentialWithdraw"
      | "InterestAccrued"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ETH_PRICE_USDC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIXED_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyResume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getETHPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTotalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onConfidentialTransferReceived",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ETH_PRICE_USDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIXED_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyResume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETHPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onConfidentialTransferReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ConfidentialSupplyEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfidentialWithdrawEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestAccruedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialLendingVault extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialLendingVault;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialLendingVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETH_PRICE_USDC: TypedContractMethod<[], [bigint], "view">;

  FIXED_INTEREST_RATE: TypedContractMethod<[], [bigint], "view">;

  INITIAL_RATE: TypedContractMethod<[], [bigint], "view">;

  RATE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  USDC_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  asset: TypedContractMethod<[], [string], "view">;

  currentRate: TypedContractMethod<[], [bigint], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyResume: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentInterestRate: TypedContractMethod<[], [bigint], "view">;

  getETHPrice: TypedContractMethod<[], [bigint], "view">;

  getEncryptedShares: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getEncryptedTotalAssets: TypedContractMethod<[], [string], "view">;

  getEncryptedTotalShares: TypedContractMethod<[], [string], "view">;

  getUtilizationRate: TypedContractMethod<[], [bigint], "view">;

  lastUpdateTime: TypedContractMethod<[], [bigint], "view">;

  onConfidentialTransferReceived: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      amount: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  supply: TypedContractMethod<
    [encryptedAmount: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETH_PRICE_USDC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIXED_INTEREST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RATE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyResume"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentInterestRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getETHPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedShares"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTotalAssets"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTotalShares"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUtilizationRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onConfidentialTransferReceived"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      amount: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [encryptedAmount: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ConfidentialSupply"
  ): TypedContractEvent<
    ConfidentialSupplyEvent.InputTuple,
    ConfidentialSupplyEvent.OutputTuple,
    ConfidentialSupplyEvent.OutputObject
  >;
  getEvent(
    key: "ConfidentialWithdraw"
  ): TypedContractEvent<
    ConfidentialWithdrawEvent.InputTuple,
    ConfidentialWithdrawEvent.OutputTuple,
    ConfidentialWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "InterestAccrued"
  ): TypedContractEvent<
    InterestAccruedEvent.InputTuple,
    InterestAccruedEvent.OutputTuple,
    InterestAccruedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ConfidentialSupply(address)": TypedContractEvent<
      ConfidentialSupplyEvent.InputTuple,
      ConfidentialSupplyEvent.OutputTuple,
      ConfidentialSupplyEvent.OutputObject
    >;
    ConfidentialSupply: TypedContractEvent<
      ConfidentialSupplyEvent.InputTuple,
      ConfidentialSupplyEvent.OutputTuple,
      ConfidentialSupplyEvent.OutputObject
    >;

    "ConfidentialWithdraw(address)": TypedContractEvent<
      ConfidentialWithdrawEvent.InputTuple,
      ConfidentialWithdrawEvent.OutputTuple,
      ConfidentialWithdrawEvent.OutputObject
    >;
    ConfidentialWithdraw: TypedContractEvent<
      ConfidentialWithdrawEvent.InputTuple,
      ConfidentialWithdrawEvent.OutputTuple,
      ConfidentialWithdrawEvent.OutputObject
    >;

    "InterestAccrued(uint256)": TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;
    InterestAccrued: TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
